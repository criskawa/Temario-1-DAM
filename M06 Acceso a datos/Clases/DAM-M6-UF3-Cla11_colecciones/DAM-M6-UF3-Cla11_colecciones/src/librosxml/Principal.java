package librosxml;

import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;
import org.xmldb.api.base.*;
import org.xmldb.api.modules.XMLResource;

/**
 * **************************************************************
 * Interfaz gráfica de acceso a la base de datos: Las funciones básicas son.
 * ***Añadir un recurso ***Eliminar un recurso ***Añadir una colección
 * ***Eliminar una colección ***Ejecutar un consulta XQuery y XQuery Update
 * Extension ***Ejectua consulta XUpdate
* *************************************************
 */
public class Principal extends javax.swing.JFrame {

    private GestorBD gestorBD = null;
    private ElementoBD elemSelec; //Ultimo elemento seleccionado en el arbol
    private DefaultMutableTreeNode nodoSelec;
    private DefaultMutableTreeNode estructura = null;

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        //super();
        try {
            gestorBD = new GestorBD();
            elemSelec = null;
            nodoSelec = null;
            initialize();
        } catch (ExcepcionGestorBD e) {
            JOptionPane.showMessageDialog(this, "Error en carga inicial\n" + e.getMessage(), "Error",
                    JOptionPane.ERROR_MESSAGE);
            System.exit(55);
        }
    }

    private void initialize() throws ExcepcionGestorBD {
        this.setSize(800, 600);
        this.setResizable(false);
        this.setTitle("Acceso a Datos con Exists");
        estructura = gestorBD.obtenerEstructuraColeccion(null);
        //arbolEstruc = new JTree(new DefaultTreeModel(estructura));
        arbolEstruc.setModel(new DefaultTreeModel(estructura));
        //arbolEstruc.setCellRenderer(new RenderArbol());
        arbolEstruc.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        jScrollPane2.setViewportView(arbolEstruc);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        areaQuery = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        arbolEstruc = new javax.swing.JTree();
        jScrollPane3 = new javax.swing.JScrollPane();
        areaResul = new javax.swing.JTextArea();
        botonAnadirColecc = new javax.swing.JButton();
        botonBorrarColecc = new javax.swing.JButton();
        botonAnadirRecur = new javax.swing.JButton();
        botonBorrarRecur = new javax.swing.JButton();
        botonEjQuery = new javax.swing.JButton();
        botonSalir = new javax.swing.JButton();
        eXUpdate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        areaQuery.setColumns(20);
        areaQuery.setRows(9);
        jScrollPane4.setViewportView(areaQuery);

        jScrollPane1.setViewportView(jScrollPane4);

        arbolEstruc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                arbolEstrucMousePressed(evt);
            }
        });
        arbolEstruc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                arbolEstrucFocusGained(evt);
            }
        });
        jScrollPane2.setViewportView(arbolEstruc);

        areaResul.setColumns(20);
        areaResul.setRows(5);
        areaResul.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                areaResulMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(areaResul);

        botonAnadirColecc.setText("Añadir Colección");
        botonAnadirColecc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonAnadirColeccMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                botonAnadirColeccMousePressed(evt);
            }
        });

        botonBorrarColecc.setText("Borrar Colección");
        botonBorrarColecc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBorrarColeccActionPerformed(evt);
            }
        });

        botonAnadirRecur.setText("Añadir Recurso");
        botonAnadirRecur.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                botonAnadirRecurMousePressed(evt);
            }
        });

        botonBorrarRecur.setText("Borrar Recurso");
        botonBorrarRecur.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                botonBorrarRecurMousePressed(evt);
            }
        });

        botonEjQuery.setText("Ejecutar Consulta");
        botonEjQuery.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                botonEjQueryMousePressed(evt);
            }
        });

        botonSalir.setText("SALIR");
        botonSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                botonSalirMousePressed(evt);
            }
        });

        eXUpdate.setText("Ejecutar XUpdate");
        eXUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eXUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(botonAnadirColecc)
                        .addGap(18, 18, 18)
                        .addComponent(botonBorrarColecc)
                        .addGap(18, 18, 18)
                        .addComponent(botonAnadirRecur)
                        .addGap(18, 18, 18)
                        .addComponent(botonBorrarRecur)
                        .addGap(68, 68, 68)
                        .addComponent(botonSalir))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 579, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(botonEjQuery)
                            .addComponent(eXUpdate)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonAnadirColecc)
                    .addComponent(botonBorrarColecc)
                    .addComponent(botonAnadirRecur)
                    .addComponent(botonBorrarRecur)
                    .addComponent(botonSalir))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(botonEjQuery)
                        .addGap(30, 30, 30)
                        .addComponent(eXUpdate)
                        .addGap(0, 28, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonBorrarColeccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBorrarColeccActionPerformed
        if (botonBorrarColecc.isEnabled()) {
            try {
                Collection col
                        = gestorBD.leerColeccion(elemSelec.getColeccion());
                //getNombre devuelve el nombre expandido
                if (col.getParentCollection() != null) {
                    int op
                            = dialogoConfirmacionBorrado("Desea borrar la colección "
                                    + elemSelec.getColeccion());
                    if (op == 0) {
                        gestorBD.borrarColeccion(col.getParentCollection(),
                                elemSelec.getNombre());
                        DefaultMutableTreeNode padre
                                = (DefaultMutableTreeNode) nodoSelec.getParent();
                        padre.remove(nodoSelec);
                        arbolEstruc.updateUI();
                        activarControles(ElementoBD.OTRO);
                        areaResul.setText("Coleccion : " + elemSelec.getNombre()
                                + "\nborrada correctamente");
                        elemSelec = null;
                        nodoSelec = null;
                    }
                } else {
                    areaResul.setText("No se pùede borrar la coleccion raiz");
                }
            } catch (ExcepcionGestorBD e) {
                areaResul.setText("Error añadiendo colección: "
                        + e.getMessage());
            } catch (XMLDBException e) {
                areaResul.setText("Error añadiendo colección\n" + ""
                        + "recuperando coleccion padre: "
                        + e.getMessage());
            }
        } else {
            areaResul.setText("Borrar coleccion deshabilitado");
        }
    }//GEN-LAST:event_botonBorrarColeccActionPerformed

    private void botonAnadirColeccMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonAnadirColeccMousePressed
        System.out.print("HELLO");
    }//GEN-LAST:event_botonAnadirColeccMousePressed

    private void arbolEstrucMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_arbolEstrucMousePressed

        nodoSelec = (DefaultMutableTreeNode) arbolEstruc.getLastSelectedPathComponent();
        //Se comprueba si es null para que no se llame al método sin haber eleccionado ningun nodo 
        if (nodoSelec != null) {
            elemSelec = (ElementoBD) nodoSelec.getUserObject();//Obtiene el elemento seleccionado que se guardo como tipo ElementoDB al crear el arbol.
            //Mirad GestorBD.obtenerEstructuraColeccion
            Collection col; //Es un tipo colección de XMLDB.
            try {
                col = gestorBD.leerColeccion(elemSelec.getColeccion());//Lee la colección obtenida del elemento seleccionado.
                //Para leer la colección se invocará a DatabaseManager.getCollection que necesita el nombre de la colección, el usuario y la password
            } catch (ExcepcionGestorBD e1) {
                col = null;
            }
            if (col == null) {
                areaResul.setText("¡¡¡Error obteniendo coleccion!!!\n" + elemSelec.getColeccion());
                activarControles(ElementoBD.OTRO);
            } else //Ahora, según el tipo del elemento, se visualiza una información u otra en el Text
            if (elemSelec.getTipo() == ElementoBD.COLECCION) {
                areaResul.setText("Coleccion\n" + "----------" + "\n"
                        + "Nombre : " + elemSelec.getNombre() + "\n"
                        + "Coleccion: " + elemSelec.getColeccion() + "\n");
                activarControles(ElementoBD.COLECCION);
            } else {

                Resource res = gestorBD.leerRecurso(col, elemSelec.getNombre());
                if (res == null) {
                    areaResul.setText("¡¡¡Error obteniendo recurso!!!\n"
                            + "Coleccion: " + elemSelec.getColeccion() + "\n"
                            + "Recurso : " + elemSelec.getNombre());
                    activarControles(ElementoBD.OTRO);
                } else {
                    try {
                        activarControles(elemSelec.getTipo());
                        if (elemSelec.getTipo() == ElementoBD.RECURSO_XML) {
                            //System.out.println("El nombre del elemento seleccionado es "+elemSelec.getNombre() );
                            XMLResource xmlres = (XMLResource) res;
                            //System.out.println((String) xmlres.getContent() );
                            areaResul.setText((String) xmlres.getContent());
                        } else {
                            areaResul.setText("Recurso binario\n"
                                    + "------------------------------------" + "\n"
                                    + "Coleccion: " + elemSelec.getColeccion() + "\n"
                                    + "Recurso : " + elemSelec.getNombre());
                        }
                    } catch (XMLDBException e) {
                        areaResul.setText(
                                "¡¡Error accediendo al contenido del recurso!!\n"
                                + "Coleccion: " + elemSelec.getColeccion() + "\n"
                                + "Recurso : " + elemSelec.getNombre());
                        activarControles(ElementoBD.OTRO);
                    }
                }
            }
        } else {
            activarControles(ElementoBD.OTRO);
        }
    }//GEN-LAST:event_arbolEstrucMousePressed

    private void areaResulMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_areaResulMouseClicked
        System.out.print("HELLO");
    }//GEN-LAST:event_areaResulMouseClicked

    private void arbolEstrucFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_arbolEstrucFocusGained
        System.out.print("HELLO");
    }//GEN-LAST:event_arbolEstrucFocusGained

    private void botonEjQueryMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonEjQueryMousePressed
        try {
            ResourceSet resultado;  //El resultado se guarda en un ResourceSet;
            if (areaQuery.getText().length() > 0) {
                resultado = null;
                areaResul.setText("");
                DefaultMutableTreeNode nodo = (DefaultMutableTreeNode) arbolEstruc.getLastSelectedPathComponent();
                if (nodo == null) {
                    resultado = gestorBD.ejecutarQuery(areaQuery.getText(), null); //Ejecuta la consulta. Como el contexto es null se usa como contexto la raíz ya que no se ha seleccionado ningún nodo.
                } else {
                    ElementoBD miElem = (ElementoBD) nodo.getUserObject();
                    resultado = gestorBD.ejecutarQuery(areaQuery.getText(), //Ejecuta la consulta con el contexto especificado.
                            miElem.getColeccion());
                }
                ResourceIterator iterator = resultado.getIterator();
                if (!iterator.hasMoreResources()) {
                    areaResul.setText("La consulta no ha devuelto resultados");
                } else {
                    while (iterator.hasMoreResources()) {
                        Resource res = iterator.nextResource();
                        areaResul.append((String) res.getContent() + "\n");
                    }
                }
            } else {
                areaResul.setText("No hay ninguna query escrita");
            }
        } catch (ExcepcionGestorBD e) {
            areaResul.setText(e.getMessage());
        } catch (XMLDBException e) {
            areaResul.setText(e.getMessage());
        }
    }//GEN-LAST:event_botonEjQueryMousePressed

    private void botonSalirMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonSalirMousePressed
        System.exit(0);
    }//GEN-LAST:event_botonSalirMousePressed

    private void botonAnadirRecurMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonAnadirRecurMousePressed
        if (botonAnadirRecur.isEnabled()) {
            File nuevoFichero = dialogoAnadirRecurso();
            if (nuevoFichero != null) {
                int tipoRecurso = dialogoSeleccionTipoRecurso();
                if (tipoRecurso != ElementoBD.OTRO) {
                    try {
                        Collection col = gestorBD.leerColeccion(elemSelec.getColeccion());
                        gestorBD.anadirRecurso(col, nuevoFichero, tipoRecurso);
                        nodoSelec.insert(new DefaultMutableTreeNode(
                                new ElementoBD(nuevoFichero.getName(), tipoRecurso,
                                        elemSelec.getColeccion())), 0);
                        arbolEstruc.updateUI();
                        areaResul.setText("Recurso añadido correctamente");
                    } catch (ExcepcionGestorBD e) {
                        areaResul.setText("Error añadiendo en BD: "
                                + e.getMessage());
                    }
                } else {
                    areaResul.setText("Añadir recurso cancelado");
                }
            } else {
                areaResul.setText("Añadir recurso cancelado");
            }
        } else {
            areaResul.setText("Añadir recurso deshabilitado");
        }
    }//GEN-LAST:event_botonAnadirRecurMousePressed

    private void botonBorrarRecurMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonBorrarRecurMousePressed
        if (botonBorrarRecur.isEnabled()) {
            try {
                Collection col = gestorBD.leerColeccion(elemSelec.getColeccion());
                int op
                        = dialogoConfirmacionBorrado("Desea borrar el recurso "
                                + elemSelec.getNombre());
                if (op == 0) {
                    gestorBD.borrarRecurso(col, elemSelec.getNombre());
                    DefaultMutableTreeNode padre = (DefaultMutableTreeNode) nodoSelec.getParent();
                    padre.remove(nodoSelec);
                    arbolEstruc.updateUI();
                    activarControles(ElementoBD.OTRO);
                    areaResul.setText("Recurso : "
                            + elemSelec.getNombre()
                            + "\nborrado correctamente");
                    elemSelec = null;
                    nodoSelec = null;
                }
            } catch (ExcepcionGestorBD e) {
                areaResul.setText("Error borrando un recurso: "
                        + e.getMessage());
            }
        } else {
            areaResul.setText("Borrar recurso deshabilitado");
        }
    }//GEN-LAST:event_botonBorrarRecurMousePressed

    private void botonAnadirColeccMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonAnadirColeccMouseClicked
        if (botonAnadirColecc.isEnabled()) {
            String nombNewCol = dialogoAnadirColeccion();
            if (nombNewCol != null) {
                if (nombNewCol.length() > 0) {
                    try {
                        Collection col
                                = gestorBD.leerColeccion(elemSelec.getColeccion());
                        //añade el nombre sin expandir, ya lo hace la función
                        Collection newCol = gestorBD.anadirColeccion(col, nombNewCol);
                        String nombreNewCol = (new String(newCol.getName()));
                        String nombreExpandido
                                = nombreNewCol.substring(nombreNewCol.lastIndexOf("/") + 1);
                        //creando el elemento lo hacemos con el nombre expandido
                        nodoSelec.insert(new DefaultMutableTreeNode(
                                new ElementoBD(
                                        nombreExpandido,
                                        ElementoBD.COLECCION,
                                        elemSelec.getColeccion() + "/" + nombreExpandido)), 0);
                        arbolEstruc.updateUI();
                        areaResul.setText("Colección añadida corrctamente");
                    } catch (ExcepcionGestorBD e) {
                        areaResul.setText("Error añadiendo colección: "
                                + e.getMessage());
                    } catch (XMLDBException e) {
                        areaResul.setText("Error añadiendo colección\n" + "Obteniendo nombre: " + e.getMessage());
                    }
                } else {
                    areaResul.setText("No ha introducido ningún nombre");
                }
            } else {
                areaResul.setText("Añadir coleccion cancelada");
            }
        } else {
            areaResul.setText("Añadir coleccion deshabilitado");
        }
    }//GEN-LAST:event_botonAnadirColeccMouseClicked

    private void eXUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eXUpdateActionPerformed
        try {

            if (areaQuery.getText().length() > 0) {

                areaResul.setText("");
                DefaultMutableTreeNode nodo = (DefaultMutableTreeNode) arbolEstruc.getLastSelectedPathComponent();
                if (nodo == null) {
                    gestorBD.ejecutarXUpdate(areaQuery.getText(), null); //Ejecuta la consulta. Como el contexto es null se usa como contexto la raíz ya que no se ha seleccionado ningún nodo.
                } else {
                    ElementoBD miElem = (ElementoBD) nodo.getUserObject();
                    gestorBD.ejecutarXUpdate(areaQuery.getText(), //Ejecuta la consulta con el contexto especificado.
                            miElem.getColeccion());
                }
                areaResul.setText("XUpdate Ejecutado");

            } else {
                areaResul.setText("No hay ninguna query escrita");
            }
        } catch (ExcepcionGestorBD e) {
            areaResul.setText(e.getMessage());
        }
    }//GEN-LAST:event_eXUpdateActionPerformed
    /**
     * Muestra el dialogo modal para pedior el nombre de la nueva colección
     *
     * @return Nombre de la coleccion a añadir
     */
    private String dialogoAnadirColeccion() {
        String nombre = JOptionPane.showInputDialog(this, "Nombre de la colección", "Añadir coleccion",
                JOptionPane.QUESTION_MESSAGE);
        if (nombre != null) {
            return nombre.trim();
        } else {
            return nombre;
        }
    }

    /**
     * Muestra el dialo de selección de tipo de recurso a añadir
     *
     * @return tipo de recurso seleccionado
     */
    private int dialogoSeleccionTipoRecurso() {
        int tiporec;
        String[] valores = {"XML", "Binario"};
        String valorSelec
                = (String) JOptionPane.showInputDialog(this,
                        "Selecciona un tipo de recurso",
                        "Tipo de recurso",
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        valores,
                        valores[0]);
        if (valorSelec == null) {
            tiporec = ElementoBD.OTRO;
        } else if (valorSelec.equals(valores[0])) {
            tiporec = ElementoBD.RECURSO_XML;
        } else {
            tiporec = ElementoBD.RECURSO_BINARIO;
        }
        return tiporec;
    }

    /**
     * Abre un selector de fichero estándar para elegir el fichero a * añadir a
     * la coleccion
     *
     * @return File fichero seleccionado
     */
    private File dialogoAnadirRecurso() {
        File fichero = null;
        int rv;
        JFileChooser fc = new JFileChooser();
        fc.setMultiSelectionEnabled(false);
        fc.setDialogType(JFileChooser.OPEN_DIALOG);
        rv = fc.showOpenDialog(this);
        if (rv == JFileChooser.APPROVE_OPTION) {
            fichero = fc.getSelectedFile();
        }
        return fichero;
    }

    /**
     * dialogo de confirmacion de borrado
*
     */
    private int dialogoConfirmacionBorrado(String mensaje) {
        String string1 = "Si, Borrar";
        String string2 = "No, Cancelar";
        Object[] options = {string1, string2};
        int opBorrado = JOptionPane.showOptionDialog(this, mensaje, "Borrado",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                string1);
        return (opBorrado);
    }

    /**
     * Activa los botones de la aplicación en función del elemento indicado
     *
     * @param elemSelec tipo de elemento seleccionado en el árbol
     */
    private void activarControles(int elemSelec) {
        if (elemSelec == ElementoBD.COLECCION) {
            botonAnadirColecc.setEnabled(true);
            botonBorrarColecc.setEnabled(true);
            botonAnadirRecur.setEnabled(true);
            botonBorrarRecur.setEnabled(false);
        } else if (elemSelec == ElementoBD.RECURSO_XML
                || elemSelec == ElementoBD.RECURSO_BINARIO) {
            botonAnadirColecc.setEnabled(false);
            botonBorrarColecc.setEnabled(false);
            botonAnadirRecur.setEnabled(false);
            botonBorrarRecur.setEnabled(true);
        } else {
            botonAnadirColecc.setEnabled(false);
            botonBorrarColecc.setEnabled(false);
            botonAnadirRecur.setEnabled(false);
            botonBorrarRecur.setEnabled(false);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Principal().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree arbolEstruc;
    private javax.swing.JTextArea areaQuery;
    private javax.swing.JTextArea areaResul;
    private javax.swing.JButton botonAnadirColecc;
    private javax.swing.JButton botonAnadirRecur;
    private javax.swing.JButton botonBorrarColecc;
    private javax.swing.JButton botonBorrarRecur;
    private javax.swing.JButton botonEjQuery;
    private javax.swing.JButton botonSalir;
    private javax.swing.JButton eXUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables
}
